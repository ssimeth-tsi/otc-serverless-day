name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.9'
  TERRAFORM_VERSION: '1.5.7'

jobs:
  validate-code:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Validate Python syntax
      run: |
        python -m py_compile src/index.py
        python -m py_compile createZip.py
        echo "‚úÖ Python syntax is valid"

    - name: Check requirements.txt
      run: |
        if [ -f requirements.txt ]; then
          echo "üìã Dependencies in requirements.txt:"
          cat requirements.txt
        else
          echo "‚ö†Ô∏è No requirements.txt found"
          exit 1
        fi

  validate-terraform:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init -backend=false

    - name: Terraform Format Check
      working-directory: ./terraform
      run: |
        terraform fmt -check -recursive
        if [ $? -ne 0 ]; then
          echo "‚ùå Terraform files are not properly formatted"
          echo "Run 'terraform fmt -recursive' locally to fix"
          exit 1
        fi
        echo "‚úÖ Terraform files are properly formatted"

    - name: Terraform Validate
      working-directory: ./terraform
      run: |
        terraform validate
        echo "‚úÖ Terraform configuration is valid"

  test-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test dependency packaging
      run: |
        echo "üîß Testing dependency packaging with Docker..."
        chmod +x packDependencies.sh
        ./packDependencies.sh
        
        if [ -d "target/dependenciesVenv/lib/python3.9/site-packages" ]; then
          echo "‚úÖ Dependencies packaged successfully"
          echo "üì¶ Package size: $(du -sh target/dependenciesVenv/lib/python3.9/site-packages | cut -f1)"
        else
          echo "‚ùå Failed to package dependencies"
          exit 1
        fi

    - name: Test ZIP creation
      run: |
        echo "üì¶ Testing ZIP creation..."
        python3 createZip.py
        
        if [ -f "code.zip" ]; then
          echo "‚úÖ code.zip created successfully"
          echo "üìè ZIP size: $(ls -lh code.zip | awk '{print $5}')"
          
          # Check if ZIP is not too large (10MB limit for example)
          ZIP_SIZE=$(stat -f%z code.zip 2>/dev/null || stat -c%s code.zip 2>/dev/null)
          MAX_SIZE=$((10 * 1024 * 1024))  # 10MB in bytes
          
          if [ $ZIP_SIZE -gt $MAX_SIZE ]; then
            echo "‚ö†Ô∏è Warning: code.zip is larger than 10MB"
          fi
        else
          echo "‚ùå Failed to create code.zip"
          exit 1
        fi

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '‚úÖ All validation checks passed! Ready for review.'
          })