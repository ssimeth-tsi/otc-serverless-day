name: Deploy to OTC FunctionGraph

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger

env:
  PYTHON_VERSION: '3.9'
  TERRAFORM_VERSION: '1.5.7'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install dependencies for packaging
      run: |
        python -m pip install --upgrade pip
        pip install requests  # For createZip.py if needed

    - name: Build Linux dependencies with Docker
      run: |
        echo "Building dependencies for Linux..."
        chmod +x packDependencies.sh
        ./packDependencies.sh

    - name: Create deployment package
      run: |
        echo "Creating code.zip..."
        python3 createZip.py
        ls -lh code.zip
        echo "Package size: $(du -h code.zip | cut -f1)"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ vars.TERRAFORM_VERSION }}

    - name: Terraform Init
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.OTC_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.OTC_SECRET_KEY }}
        AWS_ENDPOINT_URL_S3: https://obs.${{ vars.OTC_REGION }}.otc.t-systems.com
        AWS_REQUEST_CHECKSUM_CALCULATION: when_required
        AWS_RESPONSE_CHECKSUM_VALIDATION: when_required
      run: |
        terraform init \
          -backend-config="endpoints={s3=\"https://obs.${{ vars.OTC_REGION }}.otc.t-systems.com\"}" \
          -backend-config="bucket=${{ vars.OTC_BUCKET }}" \
          -backend-config="key=terraform-state/otc-serverless" \
          -backend-config="region=${{ vars.OTC_REGION }}" \
          -backend-config="access_key=${{ secrets.OTC_ACCESS_KEY }}" \
          -backend-config="secret_key=${{ secrets.OTC_SECRET_KEY }}" \
          -backend-config="skip_credentials_validation=true" \
          -backend-config="skip_region_validation=true" \
          -backend-config="skip_s3_checksum=true" \
          -backend-config="skip_metadata_api_check=true" \
          -backend-config="force_path_style=true"

    - name: Terraform Plan
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.OTC_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.OTC_SECRET_KEY }}
        AWS_ENDPOINT_URL_S3: https://obs.${{ vars.OTC_REGION }}.otc.t-systems.com
        AWS_REQUEST_CHECKSUM_CALCULATION: when_required
        AWS_RESPONSE_CHECKSUM_VALIDATION: when_required
        TF_VAR_domain_name: ${{ vars.OTC_DOMAIN_NAME }}
        TF_VAR_tenant_name: ${{ vars.OTC_TENANT_NAME }}
        TF_VAR_region: ${{ vars.OTC_REGION }}
        TF_VAR_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_secret_key: ${{ secrets.OTC_SECRET_KEY }}
        TF_VAR_api_gateway_id: ${{ vars.OTC_API_GATEWAY_ID }}
        TF_VAR_vpc_id: ${{ vars.OTC_VPC_ID }}
        TF_VAR_network_id: ${{ vars.OTC_NETWORK_ID }}
      run: |
        terraform plan -out=tfplan
        terraform show -no-color tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.OTC_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.OTC_SECRET_KEY }}
        AWS_ENDPOINT_URL_S3: https://obs.${{ vars.OTC_REGION }}.otc.t-systems.com
        AWS_REQUEST_CHECKSUM_CALCULATION: when_required
        AWS_RESPONSE_CHECKSUM_VALIDATION: when_required
        TF_VAR_domain_name: ${{ vars.OTC_DOMAIN_NAME }}
        TF_VAR_tenant_name: ${{ vars.OTC_TENANT_NAME }}
        TF_VAR_region: ${{ vars.OTC_REGION }}
        TF_VAR_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_secret_key: ${{ secrets.OTC_SECRET_KEY }}
        TF_VAR_api_gateway_id: ${{ vars.OTC_API_GATEWAY_ID }}
        TF_VAR_vpc_id: ${{ vars.OTC_VPC_ID }}
        TF_VAR_network_id: ${{ vars.OTC_NETWORK_ID }}
      run: terraform apply -auto-approve

    - name: Output deployment info
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.OTC_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.OTC_SECRET_KEY }}
        AWS_ENDPOINT_URL_S3: https://obs.${{ vars.OTC_REGION }}.otc.t-systems.com
        AWS_REQUEST_CHECKSUM_CALCULATION: when_required
        AWS_RESPONSE_CHECKSUM_VALIDATION: when_required
        TF_VAR_domain_name: ${{ vars.OTC_DOMAIN_NAME }}
        TF_VAR_tenant_name: ${{ vars.OTC_TENANT_NAME }}
        TF_VAR_region: ${{ vars.OTC_REGION }}
        TF_VAR_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_secret_key: ${{ secrets.OTC_SECRET_KEY }}
        TF_VAR_api_gateway_id: ${{ vars.OTC_API_GATEWAY_ID }}
        TF_VAR_vpc_id: ${{ vars.OTC_VPC_ID }}
        TF_VAR_network_id: ${{ vars.OTC_NETWORK_ID }}
      run: |
        echo "### Deployment successful! ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### API Endpoints:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get outputs without masking
        BASE_URL=$(terraform output -raw api_base_url)
        
        # Display as clickable links
        echo "**Base URL:** \`$BASE_URL\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Endpoints:**" >> $GITHUB_STEP_SUMMARY
        echo "- Root: [\`$BASE_URL/\`]($BASE_URL/)" >> $GITHUB_STEP_SUMMARY
        echo "- Users: [\`$BASE_URL/users\`]($BASE_URL/users)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Additional info
        echo "<details><summary>ðŸ“‹ All Outputs</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq '.' >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY

    - name: Test API Health Check
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.OTC_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.OTC_SECRET_KEY }}
        AWS_ENDPOINT_URL_S3: https://obs.${{ vars.OTC_REGION }}.otc.t-systems.com
        AWS_REQUEST_CHECKSUM_CALCULATION: when_required
        AWS_RESPONSE_CHECKSUM_VALIDATION: when_required
        TF_VAR_domain_name: ${{ vars.OTC_DOMAIN_NAME }}
        TF_VAR_tenant_name: ${{ vars.OTC_TENANT_NAME }}
        TF_VAR_region: ${{ vars.OTC_REGION }}
        TF_VAR_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_secret_key: ${{ secrets.OTC_SECRET_KEY }}
        TF_VAR_api_gateway_id: ${{ vars.OTC_API_GATEWAY_ID }}
        TF_VAR_vpc_id: ${{ vars.OTC_VPC_ID }}
        TF_VAR_network_id: ${{ vars.OTC_NETWORK_ID }}
      run: |
        BASE_URL=$(terraform output -raw api_base_url)
        API_URL="${BASE_URL}/users"
        echo "Testing API at: $API_URL"
        curl -f --max-time 30 "$API_URL" || echo "API test failed"
      continue-on-error: true

  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Validate Python syntax
      run: |
        python -m py_compile src/index.py
        python -m py_compile createZip.py

    - name: Check file sizes
      run: |
        echo "### File Sizes ðŸ“¦" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh src/*.py >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
